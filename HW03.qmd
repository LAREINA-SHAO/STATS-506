---
title: "Problem Set 03"
author: "Yuchen Shao"
format: pdf
editor: visual
---

Link to GitHub repository：

<https://github.com/LAREINA-SHAO/STATS-506.git>

# Problem 1 - Vision

## a.
```{r}
#install.packages("haven")
#install.packages("knitr")

library(haven)  # To read .XPT files
library(knitr)  # For generating nice tables

vix_data <- read_xpt("VIX_D.XPT")
demo_data <- read_xpt("DEMO_D.XPT")

merged_data <- merge(vix_data, demo_data, by = "SEQN", all = FALSE)

sample_size <- nrow(merged_data)
cat("Total sample size after merging:", sample_size, "\n")
```

## b.
```{r}
library(dplyr) 
# RIDAGEYR - Age at Screening Adjudicated - Recode
# VIQ220 - Glasses/contact lenses worn for distance

# Create age brackets 
merged_data <- merged_data %>%
  mutate(age_bracket = cut(RIDAGEYR, breaks = seq(0, 100, by = 10), right = FALSE, 
                           labels = paste(seq(0, 90, by = 10), seq(9, 99, by = 10),
                                          sep = "-")))

# Proportion of respondents in each age bracket who wear glasses/contact lenses
proportion_table <- merged_data %>% filter(!is.na(VIQ220) & VIQ220 %in% c(1, 2)) %>% 
  group_by(age_bracket) %>%
  summarise(
    total_count = n(),
    glasses_wearers = sum(VIQ220 == 1, na.rm = TRUE),  
    proportion = glasses_wearers / total_count
  )

# Display the table with kable
kable(proportion_table, digits = 2, format = "html", caption = "Proportion of 
      Respondents Wearing Glasses/Contact Lenses by Age Bracket")
```

## c.
```{r}
# Rename columns for easier reference
names(merged_data)[names(merged_data) == "RIDAGEYR"] <- "Age"
names(merged_data)[names(merged_data) == "VIQ220"] <- "Glass"
names(merged_data)[names(merged_data) == "RIAGENDR"] <- "Gender"
names(merged_data)[names(merged_data) == "RIDRETH1"] <- "Race"
names(merged_data)[names(merged_data) == "INDFMPIR"] <- "PIR"

# Transform 'Glass' to binary: 1 if wears glasses, 0 otherwise
merged_data$Glass <- ifelse(merged_data$Glass == 1, 1, 0)

# Create a new dataset with relevant transformations
df_fit <- merged_data %>%
  mutate(Female = as.factor(ifelse(Gender == 2, 1, 0)),  # 1 for female, 0 for male
         Race = as.factor(Race))  # Convert race to a factor

# Model 1:
model1 <- glm(Glass ~ Age, data = df_fit, family = binomial)
summary(model1)

# Model 2: 
model2 <- glm(Glass ~ Age + Race + Female, data = df_fit, family = binomial)
summary(model2)

# Model 3: 
model3 <- glm(Glass ~ Age + Race + Female + PIR, data = df_fit, family = binomial)
summary(model3)

results <- list(model1, model2, model3)

# Create a summary table for model information
model_summary <- data.frame(
  Model = c("Model 1: Age", 
            "Model 2: Age + Race + Female", 
            "Model 3: Age + Race + Female + PIR"),
  Sample_Size = sapply(results, function(x) sum(!is.na(x$model$Glass))),  
  Pseudo_R2 = sapply(results, function(x) 1 - (x$deviance / x$null.deviance)),  
  AIC = sapply(results, AIC)  
)

coefficients <- lapply(results, coef)
coef_names <- unique(unlist(lapply(coefficients, names)))

# Create an empty data frame to store coefficients for each model
coefficients_df <- data.frame(matrix(NA, nrow = length(coefficients), 
                                     ncol = length(coef_names)))
colnames(coefficients_df) <- coef_names
rownames(coefficients_df) <- c("Model 1", "Model 2", "Model 3")

# Fill the coefficient data frame with values for each model
for (i in seq_along(coefficients)) {
  coefficients_df[i, names(coefficients[[i]])] <- coefficients[[i]]
}

# Combine the model summary with the coefficients for the final table
final_table <- cbind(model_summary, coefficients_df)
```
```{r}
#install.packages("stargazer")
library(stargazer)

# Transpose the final_table
final_table_transposed <- as.data.frame(t(final_table))

# Convert rownames to the first column to preserve variable names
final_table_transposed <- cbind(Variable = rownames(final_table_transposed), 
                                final_table_transposed)
rownames(final_table_transposed) <- NULL  # Reset rownames

# Use stargazer to display the transposed table
stargazer(final_table_transposed, type = "text", summary = FALSE,
          title = "Estimated Coefficients and Model Statistics (Transposed)",
          digits = 3)
```
## d.
```{r}
summary(model3)
```
The odds of men and women wearing glasses/contact lenses for distance vision differ significantly. Specifically, women have lower odds of wearing glasses/contact lenses than men, with an odds ratio of 0.52, and this difference is highly statistically significant (p-value < 2e-16).
```{r}
# Create a table of the number of wearers and non-wearers by gender
gender_table <- table(df_fit$Female, df_fit$Glass)

# Perform a chi-squared test to compare proportions
prop_test <- prop.test(gender_table)

prop_test
```
There is a statistically significant difference in the proportion of men and women wearing glasses/contact lenses for distance vision. Specifically, women are significantly more likely to wear glasses/contact lenses than men, with the difference in proportions being between 7.88% and 12.70%.

# Problem 2 - Sakila
## a.
```{r}
#install.packages("RSQLite")
library(RSQLite)
library(DBI)
sakila <- dbConnect(RSQLite::SQLite(), "sakila_master.db")
```

```{r}
dbGetQuery(sakila, "
  SELECT release_year, COUNT(*) as num_movies 
  FROM film
  WHERE release_year = (SELECT min(release_year) FROM film)
  GROUP BY release_year
")
```
We only have movies released in 2006.

## b.
First way:
```{r}
# Retrieve data
film_cat <- dbGetQuery(sakila, "SELECT * FROM film_category")
cat <- dbGetQuery(sakila, "SELECT * FROM category")

# Count the occurrences of each category_id
cat_count <- table(film_cat$category_id)
min_cat <- which.min(cat_count)

result <- c(cat$name[cat$category_id == min_cat], cat_count[min_cat])
result
```
Second way:
```{r}
dbGetQuery(sakila, "
 SELECT c.name, count(c.category_id) AS count
 FROM category as c
 RIGHT JOIN film_category AS fc ON fc.category_id = c.category_id
 GROUP BY c.category_id
 ORDER by count
 LIMIT 1
")
```
## c.
First way:
```{r}
# Retrieve data
customer <- dbGetQuery(sakila, "SELECT * FROM customer")
address  <- dbGetQuery(sakila, "SELECT * FROM address")
city     <- dbGetQuery(sakila, "SELECT * FROM city")
country  <- dbGetQuery(sakila, "SELECT * FROM country")


# Match the city_id for each customer based on their address_id
cities <- address$city_id[match(customer$address_id, address$address_id)]
# Match the country_id for each city based on the city_id
countries <- city$country_id[match(cities, city$city_id)]
# Counting the occurrences of each country
tcountries <- table(country$country[match(countries, country$country_id)])

result <- tcountries[tcountries == 13]
result
```
Second way:
```{r}
dbGetQuery(sakila, "
SELECT co.country, count(co.country) AS count
  FROM country AS co
 RIGHT JOIN
    (SELECT country_id
       FROM city AS ci
      RIGHT JOIN
         (SELECT city_id
            FROM customer AS c
            LEFT JOIN address AS a ON c.address_id = a.address_id
         ) AS ca ON ca.city_id = ci.city_id
    ) AS ccc ON ccc.country_id = co.country_id
 GROUP BY co.country
HAVING count == 13")
```

# Problem 3 - US Records
## a.
```{r}
us500 <- read.csv("us-500.csv")

# Use grepl to find all email addresses that end with 'com'($ means end of string)
com_emails <- us500$email[grepl("com$", us500$email)]
proportion1 <- length(com_emails) / nrow(us500)
cat("The proportion of email addresses are hosted at a domain with TLD “.com” is", 
    proportion1)
```
## b.
```{r}
# Split the email addresses into the username and domain 
email_parts <- strsplit(us500$email, "@")
usernames <- sapply(email_parts, "[[", 1)
domains <- sapply(email_parts, "[[", 2)

# [^a-zA-Z0-9] matches any character that is not a letter or number
username_non_alphanumeric <- grepl("[^a-zA-Z0-9]", usernames)

# Remove the ".com", ".net", ".org", etc.
domains <- gsub("\\.[a-z]{3}$", "", domains)
domain_non_alphanumeric <- grepl("[^a-zA-Z0-9]", domains)

# Calculate the proportion
proportion2 <- mean(username_non_alphanumeric | domain_non_alphanumeric)
cat("The proportion of email addresses have at least one non alphanumeric 
    character in them is", proportion2)
```
## c.
```{r}
# Extract the first three characters (area codes) from 'phone1' and 'phone2'
phone1area <- substr(us500$phone1, 1, 3)
phone2area <- substr(us500$phone2, 1, 3)

# Frequency table of the combination of area codes
area_code_table <- table(c(phone1area, phone2area))

# Display the top 5 area codes and their counts
sort(area_code_table, decreasing = TRUE)[1:5]
```
## d.
```{r}
# Identify apartment addresses that end with a number 
# "[0-9]+$" looks for addresses that end with one or more digits
apartments <- us500$address[grepl("[0-9]+$", us500$address)]

# Split each apartment address into individual words 
numbers <- sapply(strsplit(apartments, " "), function(x) x[length(x)])

#Remove the "#" symbol from the apartment numbers
numbers <- as.numeric(gsub("#", "", numbers))

hist(log(numbers), main = "Log-Transformed Apartment Numbers", xlab = "Log(Number)",
     ylab = "Frequency")
```
## e.
```{r}
table(substr(numbers, 1, 1))
```


```{r}
leading_digits <- as.numeric(substr(numbers, 1, 1))

observed_distribution <- table(leading_digits)
# Normalize to get proportions
observed_distribution <- observed_distribution / sum(observed_distribution)  

#Create a barplot to compare the observed vs. expected distributions.
barplot(rbind(observed_distribution,log10(1 + 1 / (1:9))),
        beside = TRUE, col = c("pink", "grey"),
        names.arg = 1:9, legend = c("Observed", "Benford's Law"),
        main = "Comparison of Leading Digit Distribution",
        xlab = "Leading Digit", ylab = "Proportion")
```
The apartment numbers doesn't follow Benford’s law from the distribution. This data does not appear real.
